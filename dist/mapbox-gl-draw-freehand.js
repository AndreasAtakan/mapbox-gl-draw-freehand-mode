!function(e){var t={};function r(o){if(t[o])return t[o].exports;var n=t[o]={i:o,l:!1,exports:{}};return e[o].call(n.exports,n,n.exports,r),n.l=!0,n.exports}r.m=e,r.c=t,r.d=function(e,t,o){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)r.d(o,n,function(t){return e[t]}.bind(null,n));return o},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";r.r(t);const o="add",n="pointer",i="none",a="polygon",u="Feature",s="Polygon",c="LineString",l="Point",f="simple_select",p="draw.create",d="feature",g="vertex",y="true",h="false";function m(e){const t=e.featureTarget;return!!t&&(!!t.properties&&t.properties.meta===g)}var b={enable(e){setTimeout(()=>{e.map&&e.map.doubleClickZoom&&e._ctx&&e._ctx.store&&e._ctx.store.getInitialConfigValue&&e._ctx.store.getInitialConfigValue("doubleClickZoom")&&e.map.doubleClickZoom.enable()},0)},disable(e){setTimeout(()=>{e.map&&e.map.doubleClickZoom&&e.map.doubleClickZoom.disable()},0)}};var v=function(e,t){return!!e.lngLat&&(e.lngLat.lng===t[0]&&e.lngLat.lat===t[1])},w=function(e,t,r,o){return{type:u,properties:{meta:g,parent:e,coord_path:r,active:o?y:h},geometry:{type:l,coordinates:t}}};const x={onSetup:function(){const e=this.newFeature({type:u,properties:{},geometry:{type:s,coordinates:[[]]}});return this.addFeature(e),this.clearSelectedFeatures(),b.disable(this),this.updateUIClasses({mouse:o}),this.activateUIButton(a),this.setActionableState({trash:!0}),{polygon:e,currentVertexPosition:0}},clickAnywhere:function(e,t){if(e.currentVertexPosition>0&&v(t,e.polygon.coordinates[0][e.currentVertexPosition-1]))return this.changeMode(f,{featureIds:[e.polygon.id]});this.updateUIClasses({mouse:o}),e.polygon.updateCoordinate("0."+e.currentVertexPosition,t.lngLat.lng,t.lngLat.lat),e.currentVertexPosition++,e.polygon.updateCoordinate("0."+e.currentVertexPosition,t.lngLat.lng,t.lngLat.lat)},clickOnVertex:function(e){return this.changeMode(f,{featureIds:[e.polygon.id]})},onMouseMove:function(e,t){e.polygon.updateCoordinate("0."+e.currentVertexPosition,t.lngLat.lng,t.lngLat.lat),m(t)&&this.updateUIClasses({mouse:n})}};x.onTap=x.onClick=function(e,t){return m(t)?this.clickOnVertex(e,t):this.clickAnywhere(e,t)},x.onKeyUp=function(e,t){!function(e){return 27===e.keyCode}(t)?function(e){return 13===e.keyCode}(t)&&this.changeMode(f,{featureIds:[e.polygon.id]}):(this.deleteFeature([e.polygon.id],{silent:!0}),this.changeMode(f))},x.onStop=function(e){this.updateUIClasses({mouse:i}),b.enable(this),this.activateUIButton(),void 0!==this.getFeature(e.polygon.id)&&(e.polygon.removeCoordinate("0."+e.currentVertexPosition),e.polygon.isValid()?this.map.fire(p,{features:[e.polygon.toGeoJSON()]}):(this.deleteFeature([e.polygon.id],{silent:!0}),this.changeMode(f,{},{silent:!0})))},x.toDisplayFeatures=function(e,t,r){const o=t.properties.id===e.polygon.id;if(t.properties.active=o?y:h,!o)return r(t);if(0===t.geometry.coordinates.length)return;const n=t.geometry.coordinates[0].length;if(!(n<3)){if(t.properties.meta=d,r(w(e.polygon.id,t.geometry.coordinates[0][0],"0.0",!1)),n>3){const o=t.geometry.coordinates[0].length-3;r(w(e.polygon.id,t.geometry.coordinates[0][o],"0."+o,!1))}if(n<=4){const e=[[t.geometry.coordinates[0][0][0],t.geometry.coordinates[0][0][1]],[t.geometry.coordinates[0][1][0],t.geometry.coordinates[0][1][1]]];if(r({type:u,properties:t.properties,geometry:{coordinates:e,type:c}}),3===n)return}return r(t)}},x.onTrash=function(e){this.deleteFeature([e.polygon.id],{silent:!0}),this.changeMode(f)};var P=x;function C(e,t,r){if(!M(r=r||{}))throw new Error("options is invalid");var o=r.bbox,n=r.id;if(void 0===e)throw new Error("geometry is required");if(t&&t.constructor!==Object)throw new Error("properties must be an Object");o&&O(o),n&&S(n);var i={type:"Feature"};return n&&(i.id=n),o&&(i.bbox=o),i.properties=t||{},i.geometry=e,i}function E(e){return!isNaN(e)&&null!==e&&!Array.isArray(e)}function M(e){return!!e&&e.constructor===Object}function O(e){if(!e)throw new Error("bbox is required");if(!Array.isArray(e))throw new Error("bbox must be an Array");if(4!==e.length&&6!==e.length)throw new Error("bbox must be an Array of 4 or 6 numbers");e.forEach((function(e){if(!E(e))throw new Error("bbox must only contain numbers")}))}function S(e){if(!e)throw new Error("id is required");if(-1===["string","number"].indexOf(typeof e))throw new Error("id must be a number or a string")}function j(e){if(!e)throw new Error("coords is required");if("Feature"===e.type&&null!==e.geometry)return e.geometry.coordinates;if(e.coordinates)return e.coordinates;if(Array.isArray(e))return e;throw new Error("coords must be GeoJSON Feature, Geometry Object or an Array")}function k(e){var t,r,o,n,i,a=j(e);if(2===a.length&&(t=a[0],r=a[1],t[0]!==r[0]||t[1]!==r[1]))return a;var u=[],s=a.length-1;u.push(a[0]);for(var c=1;c<s;c++)o=a[c-1],n=a[c],L(o,i=a[c+1],n)||u.push(n);return u.push(i),u}function L(e,t,r){var o=r[0],n=r[1],i=e[0],a=e[1],u=t[0],s=t[1],c=u-i,l=s-a;return 0===(o-i)*l-(n-a)*c&&(Math.abs(c)>=Math.abs(l)?c>0?i<=o&&o<=u:u<=o&&o<=i:l>0?a<=n&&n<=s:s<=n&&n<=a)}var F=function(e,t){var r="object"==typeof t?t.mutate:t;if(!e)throw new Error("geojson is required");var o=function(e,t){if(!e)throw new Error((t||"geojson")+" is required");if(e.geometry&&e.geometry.type)return e.geometry.type;if(e.type)return e.type;throw new Error((t||"geojson")+" is invalid")}(e),n=[];switch(o){case"LineString":n=k(e);break;case"MultiLineString":case"Polygon":j(e).forEach((function(e){n.push(k(e))}));break;case"MultiPolygon":j(e).forEach((function(e){var t=[];e.forEach((function(e){t.push(k(e))})),n.push(t)}));break;case"Point":return e;case"MultiPoint":var i={};j(e).forEach((function(e){var t=e.join("-");i.hasOwnProperty(t)||(n.push(e),i[t]=!0)}));break;default:throw new Error(o+" geometry not supported")}return e.coordinates?!0===r?(e.coordinates=n,e):{type:o,coordinates:n}:!0===r?(e.geometry.coordinates=n,e):C({type:o,coordinates:n},e.properties,e.bbox,e.id)};function V(e){var t={type:"Feature"};return Object.keys(e).forEach((function(r){switch(r){case"type":case"properties":case"geometry":return;default:t[r]=e[r]}})),t.properties=function e(t){var r={};return t?(Object.keys(t).forEach((function(o){var n=t[o];"object"==typeof n?null===n?r[o]=null:n.length?r[o]=n.map((function(e){return e})):r[o]=e(n):r[o]=n})),r):r}(e.properties),t.geometry=A(e.geometry),t}function A(e){var t={type:e.type};return e.bbox&&(t.bbox=e.bbox),"GeometryCollection"===e.type?(t.geometries=e.geometries.map((function(e){return A(e)})),t):(t.coordinates=function e(t){if("object"!=typeof t[0])return t.slice();return t.map((function(t){return e(t)}))}(e.coordinates),t)}var I=function(e){if(!e)throw new Error("geojson is required");switch(e.type){case"Feature":return V(e);case"FeatureCollection":return function(e){var t={type:"FeatureCollection"};return Object.keys(e).forEach((function(r){switch(r){case"type":case"features":return;default:t[r]=e[r]}})),t.features=e.features.map((function(e){return V(e)})),t}(e);case"Point":case"LineString":case"Polygon":case"MultiPoint":case"MultiLineString":case"MultiPolygon":case"GeometryCollection":return A(e);default:throw new Error("unknown GeoJSON type")}};function U(e,t){var r,o,n,i,a,u,s,c,l,f,p=0,d="FeatureCollection"===e.type,g="Feature"===e.type,y=d?e.features.length:1;for(r=0;r<y;r++){for(u=d?e.features[r].geometry:g?e.geometry:e,c=d?e.features[r].properties:g?e.properties:{},l=d?e.features[r].bbox:g?e.bbox:void 0,f=d?e.features[r].id:g?e.id:void 0,a=(s=!!u&&"GeometryCollection"===u.type)?u.geometries.length:1,n=0;n<a;n++)if(null!==(i=s?u.geometries[n]:u))switch(i.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":if(!1===t(i,p,c,l,f))return!1;break;case"GeometryCollection":for(o=0;o<i.geometries.length;o++)if(!1===t(i.geometries[o],p,c,l,f))return!1;break;default:throw new Error("Unknown Geometry Type")}else if(!1===t(null,p,c,l,f))return!1;p++}}function T(e){return!!e&&e.constructor===Object}function _(e,t,r){var o=t.x,n=t.y,i=r.x-o,a=r.y-n;if(0!==i||0!==a){var u=((e.x-o)*i+(e.y-n)*a)/(i*i+a*a);u>1?(o=r.x,n=r.y):u>0&&(o+=i*u,n+=a*u)}return(i=e.x-o)*i+(a=e.y-n)*a}function G(e,t){var r=e.length-1,o=[e[0]];return function e(t,r,o,n,i){for(var a,u=n,s=r+1;s<o;s++){var c=_(t[s],t[r],t[o]);c>u&&(a=s,u=c)}u>n&&(a-r>1&&e(t,r,a,n,i),i.push(t[a]),o-a>1&&e(t,a,o,n,i))}(e,0,r,t,o),o.push(e[r]),o}function q(e,t,r){if(e.length<=2)return e;var o=void 0!==t?t*t:1;return e=G(e=r?e:function(e,t){for(var r,o,n,i,a,u=e[0],s=[u],c=1,l=e.length;c<l;c++)r=e[c],n=u,i=void 0,a=void 0,i=(o=r).x-n.x,a=o.y-n.y,i*i+a*a>t&&(s.push(r),u=r);return u!==r&&s.push(r),s}(e,o),o)}function N(e,t,r){return q(e.map((function(e){return{x:e[0],y:e[1],z:e[2]}})),t,r).map((function(e){return e.z?[e.x,e.y,e.z]:[e.x,e.y]}))}function D(e,t,r){return e.map((function(e){var o=e.map((function(e){return{x:e[0],y:e[1]}}));if(o.length<4)throw new Error("invalid polygon");for(var n=q(o,t,r).map((function(e){return[e.x,e.y]}));!Z(n);)n=q(o,t-=.01*t,r).map((function(e){return[e.x,e.y]}));return n[n.length-1][0]===n[0][0]&&n[n.length-1][1]===n[0][1]||n.push(n[0]),n}))}function Z(e){return!(e.length<3)&&!(3===e.length&&e[2][0]===e[0][0]&&e[2][1]===e[0][1])}var J=function(e,t){if(!T(t=t||{}))throw new Error("options is invalid");var r=void 0!==t.tolerance?t.tolerance:1,o=t.highQuality||!1,n=t.mutate||!1;if(!e)throw new Error("geojson is required");if(r&&r<0)throw new Error("invalid tolerance");return!0!==n&&(e=I(e)),U(e,(function(e){!function(e,t,r){var o=e.type;if("Point"===o||"MultiPoint"===o)return e;F(e,!0);var n=e.coordinates;switch(o){case"LineString":e.coordinates=N(n,t,r);break;case"MultiLineString":e.coordinates=n.map((function(e){return N(e,t,r)}));break;case"Polygon":e.coordinates=D(n,t,r);break;case"MultiPolygon":e.coordinates=n.map((function(e){return D(e,t,r)}))}}(e,r,o)})),e};const z=Object.assign({},P);z.onSetup=function(){const e=this.newFeature({type:u,properties:{},geometry:{type:Constants.geojsonTypes.POLYGON,coordinates:[[]]}});return this.addFeature(e),this.clearSelectedFeatures(),b.disable(this),setTimeout(()=>{this.map&&this.map.dragPan&&this.map.dragPan.disable()},0),this.updateUIClasses({mouse:Constants.cursors.ADD}),this.activateUIButton(Constants.types.POLYGON),this.setActionableState({trash:!0}),console.log("me"),{polygon:e,currentVertexPosition:0,dragMoving:!1}},z.onDrag=z.onTouchMove=function(e,t){e.dragMoving=!0,this.updateUIClasses({mouse:Constants.cursors.ADD}),e.polygon.updateCoordinate("0."+e.currentVertexPosition,t.lngLat.lng,t.lngLat.lat),e.currentVertexPosition++,e.polygon.updateCoordinate("0."+e.currentVertexPosition,t.lngLat.lng,t.lngLat.lat)},z.onMouseUp=function(e,t){if(e.dragMoving){var r=3/(150*(this.map.getZoom()-4))-.001;J(e.polygon,{mutate:!0,tolerance:r,highQuality:!0}),this.fireUpdate(),this.changeMode(Constants.modes.SIMPLE_SELECT,{featureIds:[e.polygon.id]})}},z.onTouchEnd=function(e,t){this.onMouseUp(e,t)},z.fireUpdate=function(){this.map.fire(Constants.events.UPDATE,{action:Constants.updateActions.MOVE,features:this.getSelected().map(e=>e.toGeoJSON())})};t.default=z}]);